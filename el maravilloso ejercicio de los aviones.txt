Empresa>>emitirPasaje(List<Vuelo> vuelos, Persona pasajero){
    Pasaje pasaje= new Pasaje();
    for (Vuelo vuelo: vuelos) {
       pasaje.agregar(this.comprarAsiento(vuelo, pasajero)); 
    }
    return pasaje;
}

Empresa>>comprarAsiento(Vuelo vuelo)){
   if vuelo.estaDisponible(){
     return new Asiento(vuelo.getAsiento(), vuelo)
  }
    throw new Exception("No hay asientos libres en el vuelo "+vuelo.getNombre());
}


Vuelo>>estaDisponible(){
   //saber si este vuelo tiene asientos libres
   return avion.tieneEspacio();      
}

Vuelo>>getAsiento(){
   return avion.getNroAsientoPorCriterioX();
}

Avion>>tieneEspacio()
{
  return avion.getAsientosDisponibles().size() > 0
}

----------------------------------------

class Vuelo
- fhSalida
- fhLlegada
- avion
- frecuencia,
- origen
- destino
- costo
new Vuelo(9/5/2024 7 am, 9/5/2024 9 am, BsAs, Bariloche, 30000, Boeing 747 F12)
new Vuelo(10/5/2024 7 am, 9/5/2024 9 am, BsAs, Bariloche, 30000, Boeing 747 F12)
new Vuelo(11/5/2024 7 am, 9/5/2024 9 am, BsAs, Bariloche, 30000, Boeing 747 F12)
new Vuelo(12/5/2024 7 am, 9/5/2024 9 am, BsAs, Bariloche, 30000, Boeing 747 F12)
new Vuelo(13/5/2024 7 am, 9/5/2024 9 am, BsAs, Bariloche, 30000, Boeing 747 F12)
new Vuelo(14/5/2024 7 am, 9/5/2024 9 am, BsAs, Bariloche, 30000, Boeing 747 F12)

---------------------------------------

class Vuelo
- fhSalida
- fhLlegada
- avion
- tipo

new Vuelo(9/5/2024 7 am, 9/5/2024 9 am, Boeing 747 F12, UF101)
new Vuelo(10/5/2024 7 am, 9/5/2024 9 am, Boeing 737 F12, UF101)
new Vuelo(11/5/2024 7 am, 9/5/2024 9 am, Boeing 717 F12, UF101)
new Vuelo(12/5/2024 7 am, 9/5/2024 9 am, Boeing 737 F12, UF101)
new Vuelo(13/5/2024 7 am, 9/5/2024 9 am, Boeing 747 F12, UF101)


--------------------------------------

new Avion(Boeing 747 F12, tipoAvion1)
new Avion(Boeing 717 F12, tipoAvion2)




