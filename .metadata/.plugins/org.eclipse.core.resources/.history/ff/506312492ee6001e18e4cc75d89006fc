package ar.edu.unlp.info.oo2.e1_twitter;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.List;

public class TestUsuario {
	
	Usuario usuario;
	Usuario usuario2;
	Usuario usuario3;
	Posteo tweet;
	Posteo retweet;
	Posteo retweetAjeno1;
	Posteo tweetAjeno1;
	Posteo retweetAjeno2;
	Posteo tweetAjeno2;
	Posteo retweetAjeno3;
	Posteo tweetAjeno3;
	Posteo tweetDobleAjeno;
	Posteo retweetAjeno4;
	Posteo retweetDobleAjeno;
	List<Posteo> listaPosteos;
	
	@BeforeEach
	void setup() {
		usuario = new Usuario("Mateo");
		usuario2 = new Usuario("Juan");
		usuario3= new Usuario("Pepe");
		tweet = usuario.tweetear("1er tweet");
		retweet = usuario.retweetear(tweet);
		listaPosteos = new ArrayList<>();
	}
	
	@Test
	void testPostear() {
		assertEquals(usuario.getPosteos().size(), 2);
	}

	@Test
	void testEsIgual() {
		assertTrue(usuario.esIgual("Mateo"));
		assertFalse(usuario.esIgual("Mateo "));
	}
	
	@Test
	void testGetPosteosRelacionados() {
		tweetAjeno1 = usuario2.tweetear("Este es nu tweet de otro usuario");
		listaPosteos.add(tweetAjeno1);
		retweetAjeno1 = usuario.retweetear(tweetAjeno1);
		
		tweetAjeno2 = usuario2.tweetear("Este es nu tweet de otro usuario");
		listaPosteos.add(tweetAjeno2);
		retweetAjeno2 = usuario.retweetear(tweetAjeno2);
		
		tweetAjeno3 = usuario2.tweetear("Este es nu tweet de otro usuario");
		listaPosteos.add(tweetAjeno3);
		retweetAjeno3 = usuario.retweetear(tweetAjeno3);
		
		tweetDobleAjeno = usuario3.tweetear("Este es un tweet lejano");
		retweetDobleAjeno = usuario2.retweetear(tweetDobleAjeno);
		retweetAjeno4 = usuario.retweetear(retweetDobleAjeno);
		listaPosteos.add(retweetDobleAjeno);
		
		assertEquals(usuario.getPosteosRelacionados(listaPosteos).size(), 4);
	}
	
	@Test
	void testEliminarPosteosRelacionados() {
		tweetAjeno1 = usuario2.tweetear("Este es nu tweet de otro usuario");
		listaPosteos.add(tweetAjeno1);
		retweetAjeno1 = usuario.retweetear(tweetAjeno1);
		
		tweetAjeno2 = usuario2.tweetear("Este es nu tweet de otro usuario");
		listaPosteos.add(tweetAjeno2);
		retweetAjeno2 = usuario.retweetear(tweetAjeno2);
		
		tweetAjeno3 = usuario2.tweetear("Este es nu tweet de otro usuario");
		listaPosteos.add(tweetAjeno3);
		retweetAjeno3 = usuario.retweetear(tweetAjeno3);
		
		tweetDobleAjeno = usuario3.tweetear("Este es un tweet lejano");
		retweetDobleAjeno = usuario2.retweetear(tweetDobleAjeno);
		retweetAjeno4 = usuario.retweetear(retweetDobleAjeno);
		listaPosteos.add(retweetDobleAjeno);
		
		usuario.eliminarPosteosRelacionados(listaPosteos);
		
		assertEquals(usuario.getPosteos().size(), 2);
		assertEquals(usuario.getPosteosRelacionados(listaPosteos).size(), 0);
	}
}
